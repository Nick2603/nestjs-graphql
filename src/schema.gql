# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Article implements IEntityGraphql {
  author: User
  authorId: String!
  createdAt: DateTime!
  genres: [String!]!
  id: ID!
  text: String!
  updatedAt: DateTime!
}

input CreateArticleInput {
  genres: [String!]!
  text: String!
}

input CreateProfileInput {
  name: String!
}

input CreateUserInput {
  email: String!
  password: String!
}

input CreateUserRoleInput {
  managedGenres: [String!]
  title: RoleEnum!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

interface IEntityGraphql {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type Mutation {
  addManagedGenres(genres: [String!]!, id: String!): UserRole!
  assignUserRole(roleId: String!, userId: String!): UserRole!
  createArticle(data: CreateArticleInput!, userId: String!): Article!
  createProfile(data: CreateProfileInput!, userId: String!): Profile!
  createUser(data: CreateUserInput!): User!
  createUserRole(data: CreateUserRoleInput!): UserRole!
  deleteArticle(id: String!): Article!
  deleteUser(id: String!): User!
  deleteUserRole(id: String!): UserRole!
  removeManagedGenres(genres: [String!]!, id: String!): UserRole!
  unassignUserRole(roleId: String!, userId: String!): UserRole!
  updateArticle(data: UpdateArticleInput!, id: String!): Article!
  updateProfile(data: UpdateProfileInput!, userId: String!): Profile!
  updateUser(data: UpdateUserInput!, id: String!): User!
}

type Profile implements IEntityGraphql {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Query {
  getArticle(id: String!): Article!
  getArticles: [Article!]!
  getProfile(userId: String!): Profile!
  getProfiles: [Profile!]!
  getUser(id: String!): User!
  getUserRole(id: String!): UserRole!
  getUserRoles: [UserRole!]!
  getUsers: [User!]!
}

enum RoleEnum {
  ADMIN
  MANAGER
  USER
}

input UpdateArticleInput {
  genres: [String]
  text: String
}

input UpdateProfileInput {
  name: String
}

input UpdateUserInput {
  email: String
  password: String
}

type User implements IEntityGraphql {
  articleIds: [String!]
  articles: [Article!]
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  profile: Profile
  profileId: String
  roleIds: [String!]
  roles: [UserRole]
  updatedAt: DateTime!
}

type UserRole implements IEntityGraphql {
  createdAt: DateTime!
  id: ID!
  managedGenres: [String!]!
  title: RoleEnum!
  updatedAt: DateTime!
  userIds: [String]
  users: [User]
}